* Denver Clojure Meetup 2/16/2011

"If developers are unable to design software to fully exploit the resources provided by multiple cores, then they will ultimately reach an insurmountable performance ceiling." 
http://en.wikipedia.org/wiki/Multi-core_(computing)

** ➜  Java concurrency &  parallelism
   - Visionary and prescient.
   - Built-in support for threads, locks, etc.
   - But too low level, hard to use! (notfifyAll, etc.)
   - D Lea's java.util.concurrent helped a lot.
   - But still too low level!
   - Probably same for forthcoming F/J
   - Java enables // programming but...
   - Difficult abstractions
** ➜  Clojure & its concurrency primitives
   - Built on top of Doug Lea's work
   - futures
   - promises
   - agents
   - pmap
   - pcalls
   - pvalues
** ➜  Futures
   - Wrapper around Java Futures
   - Start async process in separate thread
   - Ask for results later
   - Future results are cached
   - Examples
** ➜  Promises
   - Analogous to a SynchronousQueue in Java
   - Hand-off point
   - Useful for inter-thread communication
   - Data flow programming
** ➜  Agents
   - Agents manage state (also refs & atoms)
   - More importantly managing execution flow
   - send and send-off
   - Examples
** ➜  pmaps
   - uses futures under the hood
   - Examples
   - pcall, pvalues
** ➜  Thinking parallel
   - Clojure solved many problems
   - Must now reason about // programming
   - Watch out for serial bottle necks!
   - Check web cams URLs exercise 
** ➜  What is forthcoming?
   - Fork/Join
   - Exposing more of java.util.concurrent???
